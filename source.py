import streamlit as st
import os
import json
import chromadb
from openai import OpenAI

with open("books_summaries.json", "r", encoding="utf-8") as f:
    books = json.load(f)

#print(books_summaries[1].values())

openai_client = OpenAI()

chroma_client = chromadb.Client()
collection = chroma_client.get_or_create_collection(name="books")


summaries = [book["summary"] for book in books]

embedding = openai_client.embeddings.create(
    input = summaries,
    model = "text-embedding-3-small"
)
#print(embedding.data[1].embedding)

if collection.count() == 0:
    for idx, embed in enumerate(embedding.data):
        collection.add(
            ids=[books[idx]["title"]],
            documents=[books[idx]["summary"]],
            embeddings=[embed.embedding]
        )

def search_books(query, top_k=3):
    query_embedding = openai_client.embeddings.create(
        input=[query],
        model="text-embedding-3-small"
    ).data[0].embedding

    results = collection.query(
        query_embeddings=[query_embedding],
        n_results=top_k
    )
    return results["ids"][0]

def get_summary_by_title(title):
    title = openai_client.embeddings.create(
        input=[title],
        model="text-embedding-3-small"
    ).data[0].embedding
    result = collection.query(
        query_embeddings=[title],
        n_results=1
    )
    return result["documents"][0][0] if result else "No summary found."

st.title("Book Recommendation Chatbot")

user_input = st.text_input("Describe the kind of book you want:")

if user_input:
    titles = search_books(user_input)
    st.markdown("### Recommendations:")
    titles = titles[0]
    for title in titles:
        summary = get_summary_by_title(title)
        st.markdown(f"**{title}**  \n {summary}")

tools = [
    {
        "type": "function",
        "name": "get_summary_by_title",
        "description": "Get a summary of a book by its title.",
        "parameters": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "The title of the book you want a summary for.",
                },
            },
            "required": ["title"],
        },
    },
    {
        "type": "function",
        "name": "search_books",
        "description": "Search for books based on a query.",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The query to search for books.",
                },
                "top_k": {
                    "type": "integer",
                    "description": "The number of top results to return.",
                },
            },
            "required": ["query"],
        },
    },
]

input_list = [
    {"role": "user", "content": "You are a librarian that recommends books."}
]

response = openai_client.responses.create(
    model="gpt-4o-mini",
    tools=tools,
    input=input_list,
)

function_call = None
function_call_arguments = search_books(user_input)
input_list += response.output

for item in response.output:
    if item.type == "function_call":
        function_call = item
        function_call_arguments = json.loads(item.arguments)

if function_call_arguments and "title" in function_call_arguments:
    result = {"summary": get_summary_by_title(function_call_arguments["title"])}
else:
    result = {"summary": "No function call arguments found."}

input_list.append({
    "type": "function_call_output",
    "call_id": function_call.call_id if function_call else None,
    "output": json.dumps(result),
})

response = openai_client.responses.create(
    model="gpt-4o-mini",
    instructions="Respond with the book recommendations with the summary generated by a tool.",
    tools=tools,
    input=input_list,
)

st.markdown("### Chatbot Response:")
st.write(response.choices[0].message.content)